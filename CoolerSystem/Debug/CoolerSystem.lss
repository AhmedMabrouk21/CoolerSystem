
CoolerSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000642  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d7a  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007db  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088c  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006eb  00000000  00000000  00002a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  64:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
 */ 

#include "ADC.h"

void ADC_init(void) {
	ADMUX  |= (1<<REFS0);
  6c:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  6e:	86 b1       	in	r24, 0x06	; 6
  70:	87 68       	ori	r24, 0x87	; 135
  72:	86 b9       	out	0x06, r24	; 6
  74:	08 95       	ret

00000076 <ADC_read>:
}

int16_t ADC_read(uint8_t ch) {
	ADMUX &= 0b11100000;
  76:	97 b1       	in	r25, 0x07	; 7
  78:	90 7e       	andi	r25, 0xE0	; 224
  7a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= ch;
  7c:	97 b1       	in	r25, 0x07	; 7
  7e:	89 2b       	or	r24, r25
  80:	87 b9       	out	0x07, r24	; 7
	SETBIT(ADCSRA,ADSC);
  82:	36 9a       	sbi	0x06, 6	; 6
	while(READBIT(ADCSRA,ADSC) == 1){}
  84:	36 99       	sbic	0x06, 6	; 6
  86:	fe cf       	rjmp	.-4      	; 0x84 <ADC_read+0xe>
	
	return ADC;
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	95 b1       	in	r25, 0x05	; 5
  8c:	08 95       	ret

0000008e <LCD_write_command>:

	for(i = 0; (data[i] != '\0'); i++) {
		LCD_write_char(data[i]);
	}
	
}
  8e:	da 98       	cbi	0x1b, 2	; 27
  90:	88 23       	and	r24, r24
  92:	14 f4       	brge	.+4      	; 0x98 <LCD_write_command+0xa>
  94:	df 9a       	sbi	0x1b, 7	; 27
  96:	01 c0       	rjmp	.+2      	; 0x9a <LCD_write_command+0xc>
  98:	df 98       	cbi	0x1b, 7	; 27
  9a:	86 ff       	sbrs	r24, 6
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <LCD_write_command+0x14>
  9e:	de 9a       	sbi	0x1b, 6	; 27
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <LCD_write_command+0x16>
  a2:	de 98       	cbi	0x1b, 6	; 27
  a4:	85 ff       	sbrs	r24, 5
  a6:	02 c0       	rjmp	.+4      	; 0xac <LCD_write_command+0x1e>
  a8:	dd 9a       	sbi	0x1b, 5	; 27
  aa:	01 c0       	rjmp	.+2      	; 0xae <LCD_write_command+0x20>
  ac:	dd 98       	cbi	0x1b, 5	; 27
  ae:	84 ff       	sbrs	r24, 4
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <LCD_write_command+0x28>
  b2:	dc 9a       	sbi	0x1b, 4	; 27
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <LCD_write_command+0x2a>
  b6:	dc 98       	cbi	0x1b, 4	; 27
  b8:	db 9a       	sbi	0x1b, 3	; 27
  ba:	ef e9       	ldi	r30, 0x9F	; 159
  bc:	ff e0       	ldi	r31, 0x0F	; 15
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_write_command+0x30>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_write_command+0x36>
  c4:	00 00       	nop
  c6:	db 98       	cbi	0x1b, 3	; 27
  c8:	ef e9       	ldi	r30, 0x9F	; 159
  ca:	ff e0       	ldi	r31, 0x0F	; 15
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_write_command+0x3e>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_write_command+0x44>
  d2:	00 00       	nop
  d4:	83 ff       	sbrs	r24, 3
  d6:	02 c0       	rjmp	.+4      	; 0xdc <LCD_write_command+0x4e>
  d8:	df 9a       	sbi	0x1b, 7	; 27
  da:	01 c0       	rjmp	.+2      	; 0xde <LCD_write_command+0x50>
  dc:	df 98       	cbi	0x1b, 7	; 27
  de:	82 ff       	sbrs	r24, 2
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <LCD_write_command+0x58>
  e2:	de 9a       	sbi	0x1b, 6	; 27
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <LCD_write_command+0x5a>
  e6:	de 98       	cbi	0x1b, 6	; 27
  e8:	81 ff       	sbrs	r24, 1
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <LCD_write_command+0x62>
  ec:	dd 9a       	sbi	0x1b, 5	; 27
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <LCD_write_command+0x64>
  f0:	dd 98       	cbi	0x1b, 5	; 27
  f2:	80 ff       	sbrs	r24, 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <LCD_write_command+0x6c>
  f6:	dc 9a       	sbi	0x1b, 4	; 27
  f8:	01 c0       	rjmp	.+2      	; 0xfc <LCD_write_command+0x6e>
  fa:	dc 98       	cbi	0x1b, 4	; 27
  fc:	db 9a       	sbi	0x1b, 3	; 27
  fe:	8f e9       	ldi	r24, 0x9F	; 159
 100:	9f e0       	ldi	r25, 0x0F	; 15
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_write_command+0x74>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_write_command+0x7a>
 108:	00 00       	nop
 10a:	db 98       	cbi	0x1b, 3	; 27
 10c:	ef e9       	ldi	r30, 0x9F	; 159
 10e:	ff e0       	ldi	r31, 0x0F	; 15
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_write_command+0x82>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_write_command+0x88>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <LCD_init>:
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	8d 6f       	ori	r24, 0xFD	; 253
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 126:	8f e7       	ldi	r24, 0x7F	; 127
 128:	9e e3       	ldi	r25, 0x3E	; 62
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_init+0x10>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_init+0x16>
 130:	00 00       	nop
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 138:	8f e7       	ldi	r24, 0x7F	; 127
 13a:	9e e3       	ldi	r25, 0x3E	; 62
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_init+0x22>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_init+0x28>
 142:	00 00       	nop
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 14a:	8f e7       	ldi	r24, 0x7F	; 127
 14c:	9e e3       	ldi	r25, 0x3E	; 62
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_init+0x34>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_init+0x3a>
 154:	00 00       	nop
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	29 ef       	ldi	r18, 0xF9	; 249
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	91 50       	subi	r25, 0x01	; 1
 17c:	20 40       	sbci	r18, 0x00	; 0
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <LCD_init+0x60>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_init+0x6a>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <LCD_write_char>:
 188:	da 9a       	sbi	0x1b, 2	; 27
 18a:	88 23       	and	r24, r24
 18c:	14 f4       	brge	.+4      	; 0x192 <LCD_write_char+0xa>
 18e:	df 9a       	sbi	0x1b, 7	; 27
 190:	01 c0       	rjmp	.+2      	; 0x194 <LCD_write_char+0xc>
 192:	df 98       	cbi	0x1b, 7	; 27
 194:	86 ff       	sbrs	r24, 6
 196:	02 c0       	rjmp	.+4      	; 0x19c <LCD_write_char+0x14>
 198:	de 9a       	sbi	0x1b, 6	; 27
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCD_write_char+0x16>
 19c:	de 98       	cbi	0x1b, 6	; 27
 19e:	85 ff       	sbrs	r24, 5
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <LCD_write_char+0x1e>
 1a2:	dd 9a       	sbi	0x1b, 5	; 27
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <LCD_write_char+0x20>
 1a6:	dd 98       	cbi	0x1b, 5	; 27
 1a8:	84 ff       	sbrs	r24, 4
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <LCD_write_char+0x28>
 1ac:	dc 9a       	sbi	0x1b, 4	; 27
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <LCD_write_char+0x2a>
 1b0:	dc 98       	cbi	0x1b, 4	; 27
 1b2:	db 9a       	sbi	0x1b, 3	; 27
 1b4:	ef e9       	ldi	r30, 0x9F	; 159
 1b6:	ff e0       	ldi	r31, 0x0F	; 15
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_write_char+0x30>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_write_char+0x36>
 1be:	00 00       	nop
 1c0:	db 98       	cbi	0x1b, 3	; 27
 1c2:	ef e9       	ldi	r30, 0x9F	; 159
 1c4:	ff e0       	ldi	r31, 0x0F	; 15
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCD_write_char+0x3e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LCD_write_char+0x44>
 1cc:	00 00       	nop
 1ce:	83 ff       	sbrs	r24, 3
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCD_write_char+0x4e>
 1d2:	df 9a       	sbi	0x1b, 7	; 27
 1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <LCD_write_char+0x50>
 1d6:	df 98       	cbi	0x1b, 7	; 27
 1d8:	82 ff       	sbrs	r24, 2
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <LCD_write_char+0x58>
 1dc:	de 9a       	sbi	0x1b, 6	; 27
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <LCD_write_char+0x5a>
 1e0:	de 98       	cbi	0x1b, 6	; 27
 1e2:	81 ff       	sbrs	r24, 1
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <LCD_write_char+0x62>
 1e6:	dd 9a       	sbi	0x1b, 5	; 27
 1e8:	01 c0       	rjmp	.+2      	; 0x1ec <LCD_write_char+0x64>
 1ea:	dd 98       	cbi	0x1b, 5	; 27
 1ec:	80 ff       	sbrs	r24, 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <LCD_write_char+0x6c>
 1f0:	dc 9a       	sbi	0x1b, 4	; 27
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <LCD_write_char+0x6e>
 1f4:	dc 98       	cbi	0x1b, 4	; 27
 1f6:	db 9a       	sbi	0x1b, 3	; 27
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_write_char+0x74>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_write_char+0x7a>
 202:	00 00       	nop
 204:	db 98       	cbi	0x1b, 3	; 27
 206:	ef e9       	ldi	r30, 0x9F	; 159
 208:	ff e0       	ldi	r31, 0x0F	; 15
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCD_write_char+0x82>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <LCD_write_char+0x88>
 210:	00 00       	nop
 212:	08 95       	ret

00000214 <LCD_write_number>:
* Function Name: LCD_write_number
* Purpose      : Write number to LCD
* Parameters   : number
* Return value : void
*****************************************************************************/
void LCD_write_number(uint32_t data) {
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	ef 92       	push	r14
 21e:	ff 92       	push	r15
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	2a 97       	sbiw	r28, 0x0a	; 10
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	f8 94       	cli
 230:	de bf       	out	0x3e, r29	; 62
 232:	0f be       	out	0x3f, r0	; 63
 234:	cd bf       	out	0x3d, r28	; 61
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 236:	61 15       	cp	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	81 05       	cpc	r24, r1
 23c:	91 05       	cpc	r25, r1
 23e:	a1 f1       	breq	.+104    	; 0x2a8 <LCD_write_number+0x94>
 240:	10 e0       	ldi	r17, 0x00	; 0
		str[i] = data%10;
 242:	0f 2e       	mov	r0, r31
 244:	fa e0       	ldi	r31, 0x0A	; 10
 246:	8f 2e       	mov	r8, r31
 248:	91 2c       	mov	r9, r1
 24a:	a1 2c       	mov	r10, r1
 24c:	b1 2c       	mov	r11, r1
 24e:	f0 2d       	mov	r31, r0
 250:	01 c0       	rjmp	.+2      	; 0x254 <LCD_write_number+0x40>
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 252:	12 2f       	mov	r17, r18
		str[i] = data%10;
 254:	ee 24       	eor	r14, r14
 256:	e3 94       	inc	r14
 258:	f1 2c       	mov	r15, r1
 25a:	ec 0e       	add	r14, r28
 25c:	fd 1e       	adc	r15, r29
 25e:	e1 0e       	add	r14, r17
 260:	f1 1c       	adc	r15, r1
 262:	17 fd       	sbrc	r17, 7
 264:	fa 94       	dec	r15
 266:	a5 01       	movw	r20, r10
 268:	94 01       	movw	r18, r8
 26a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <__udivmodsi4>
 26e:	f7 01       	movw	r30, r14
 270:	60 83       	st	Z, r22
		data = data/10;
 272:	62 2f       	mov	r22, r18
 274:	73 2f       	mov	r23, r19
 276:	84 2f       	mov	r24, r20
 278:	95 2f       	mov	r25, r21
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	21 0f       	add	r18, r17
void LCD_write_number(uint32_t data) {
	
	int8_t flag = 0, i;
	uint8_t str[10];
	
	for(i = 0; data >= 1 ; i++) {
 27e:	61 15       	cp	r22, r1
 280:	71 05       	cpc	r23, r1
 282:	81 05       	cpc	r24, r1
 284:	91 05       	cpc	r25, r1
 286:	29 f7       	brne	.-54     	; 0x252 <LCD_write_number+0x3e>
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
 288:	11 23       	and	r17, r17
 28a:	74 f0       	brlt	.+28     	; 0x2a8 <LCD_write_number+0x94>
		LCD_write_char(str[i]+48);
 28c:	e1 e0       	ldi	r30, 0x01	; 1
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	e1 0f       	add	r30, r17
 296:	f1 1d       	adc	r31, r1
 298:	17 fd       	sbrc	r17, 7
 29a:	fa 95       	dec	r31
 29c:	80 81       	ld	r24, Z
 29e:	80 5d       	subi	r24, 0xD0	; 208
 2a0:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_write_char>
 2a4:	11 50       	subi	r17, 0x01	; 1
		data = data/10;
	}
	
	flag = i-1;
	
	for(i = flag; i >= 0; i--) {
 2a6:	92 f7       	brpl	.-28     	; 0x28c <LCD_write_number+0x78>
		LCD_write_char(str[i]+48);
	}
	
}
 2a8:	2a 96       	adiw	r28, 0x0a	; 10
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	08 95       	ret

000002c8 <main>:
#include "LCD_cfg.h"
#include "LCD.h"

int main(void)
{
	LCD_init();
 2c8:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_init>

	ADC_init();
 2cc:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	timer2_PWM_init();
 2d0:	0e 94 94 01 	call	0x328	; 0x328 <timer2_PWM_init>
		temp = (ADC_read(0) - 52)/2 + 25;
		
		if ((temp <= 35) && (temp > 25)) {
			duty = (temp-25)*10;
		} else if (temp >= 35) {
			duty = 100;
 2d4:	14 e6       	ldi	r17, 0x64	; 100
	// duty = ? ==> temp = 30 ==> ADC = 62
	// For 1 degree temp ==> motor speed increes by 10%
	
    while (1)
    {
		temp = (ADC_read(0) - 52)/2 + 25;
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 3b 00 	call	0x76	; 0x76 <ADC_read>
 2dc:	c4 97       	sbiw	r24, 0x34	; 52
 2de:	9c 01       	movw	r18, r24
 2e0:	12 f4       	brpl	.+4      	; 0x2e6 <main+0x1e>
 2e2:	2f 5f       	subi	r18, 0xFF	; 255
 2e4:	3f 4f       	sbci	r19, 0xFF	; 255
 2e6:	35 95       	asr	r19
 2e8:	27 95       	ror	r18
 2ea:	c9 e1       	ldi	r28, 0x19	; 25
 2ec:	c2 0f       	add	r28, r18
		
		if ((temp <= 35) && (temp > 25)) {
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	2a 30       	cpi	r18, 0x0A	; 10
 2f2:	40 f4       	brcc	.+16     	; 0x304 <main+0x3c>
			duty = (temp-25)*10;
 2f4:	dc 2f       	mov	r29, r28
 2f6:	dd 0f       	add	r29, r29
 2f8:	d2 53       	subi	r29, 0x32	; 50
 2fa:	8d 2f       	mov	r24, r29
 2fc:	88 0f       	add	r24, r24
 2fe:	88 0f       	add	r24, r24
 300:	d8 0f       	add	r29, r24
 302:	05 c0       	rjmp	.+10     	; 0x30e <main+0x46>
		} else if (temp >= 35) {
 304:	c3 32       	cpi	r28, 0x23	; 35
 306:	10 f4       	brcc	.+4      	; 0x30c <main+0x44>
			duty = 100;
		} else {
			duty = 0;
 308:	d0 e0       	ldi	r29, 0x00	; 0
 30a:	01 c0       	rjmp	.+2      	; 0x30e <main+0x46>
		temp = (ADC_read(0) - 52)/2 + 25;
		
		if ((temp <= 35) && (temp > 25)) {
			duty = (temp-25)*10;
		} else if (temp >= 35) {
			duty = 100;
 30c:	d1 2f       	mov	r29, r17
		} else {
			duty = 0;
		}
		
		LCD_write_command(0x80);
 30e:	80 e8       	ldi	r24, 0x80	; 128
 310:	0e 94 47 00 	call	0x8e	; 0x8e <LCD_write_command>
		LCD_write_number(temp);
 314:	6c 2f       	mov	r22, r28
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_write_number>

		
		timer2_PWM_Duty(duty);
 320:	8d 2f       	mov	r24, r29
 322:	0e 94 99 01 	call	0x332	; 0x332 <timer2_PWM_Duty>
    }
 326:	d7 cf       	rjmp	.-82     	; 0x2d6 <main+0xe>

00000328 <timer2_PWM_init>:
 */ 

#include "timer2.h"

void timer2_PWM_init(void) {
	SETBIT(DDRD,7); // set OC2 as output
 328:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2 |= (1<<COM21) | (1<<WGM20) | (1<<WGM21) | (1<<CS22) | (1<<CS21) | (1<<CS20); // 1024 prescaler
 32a:	85 b5       	in	r24, 0x25	; 37
 32c:	8f 66       	ori	r24, 0x6F	; 111
 32e:	85 bd       	out	0x25, r24	; 37
 330:	08 95       	ret

00000332 <timer2_PWM_Duty>:
}

void timer2_PWM_Duty(uint8_t duty) {
	OCR2 = duty*2.55;
 332:	68 2f       	mov	r22, r24
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__floatsisf>
 33e:	23 e3       	ldi	r18, 0x33	; 51
 340:	33 e3       	ldi	r19, 0x33	; 51
 342:	43 e2       	ldi	r20, 0x23	; 35
 344:	50 e4       	ldi	r21, 0x40	; 64
 346:	0e 94 3e 02 	call	0x47c	; 0x47c <__mulsf3>
 34a:	0e 94 a9 01 	call	0x352	; 0x352 <__fixunssfsi>
 34e:	63 bd       	out	0x23, r22	; 35
 350:	08 95       	ret

00000352 <__fixunssfsi>:
 352:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_splitA>
 356:	88 f0       	brcs	.+34     	; 0x37a <__fixunssfsi+0x28>
 358:	9f 57       	subi	r25, 0x7F	; 127
 35a:	98 f0       	brcs	.+38     	; 0x382 <__fixunssfsi+0x30>
 35c:	b9 2f       	mov	r27, r25
 35e:	99 27       	eor	r25, r25
 360:	b7 51       	subi	r27, 0x17	; 23
 362:	b0 f0       	brcs	.+44     	; 0x390 <__fixunssfsi+0x3e>
 364:	e1 f0       	breq	.+56     	; 0x39e <__fixunssfsi+0x4c>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	1a f0       	brmi	.+6      	; 0x376 <__fixunssfsi+0x24>
 370:	ba 95       	dec	r27
 372:	c9 f7       	brne	.-14     	; 0x366 <__fixunssfsi+0x14>
 374:	14 c0       	rjmp	.+40     	; 0x39e <__fixunssfsi+0x4c>
 376:	b1 30       	cpi	r27, 0x01	; 1
 378:	91 f0       	breq	.+36     	; 0x39e <__fixunssfsi+0x4c>
 37a:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_zero>
 37e:	b1 e0       	ldi	r27, 0x01	; 1
 380:	08 95       	ret
 382:	0c 94 37 02 	jmp	0x46e	; 0x46e <__fp_zero>
 386:	67 2f       	mov	r22, r23
 388:	78 2f       	mov	r23, r24
 38a:	88 27       	eor	r24, r24
 38c:	b8 5f       	subi	r27, 0xF8	; 248
 38e:	39 f0       	breq	.+14     	; 0x39e <__fixunssfsi+0x4c>
 390:	b9 3f       	cpi	r27, 0xF9	; 249
 392:	cc f3       	brlt	.-14     	; 0x386 <__fixunssfsi+0x34>
 394:	86 95       	lsr	r24
 396:	77 95       	ror	r23
 398:	67 95       	ror	r22
 39a:	b3 95       	inc	r27
 39c:	d9 f7       	brne	.-10     	; 0x394 <__fixunssfsi+0x42>
 39e:	3e f4       	brtc	.+14     	; 0x3ae <__fixunssfsi+0x5c>
 3a0:	90 95       	com	r25
 3a2:	80 95       	com	r24
 3a4:	70 95       	com	r23
 3a6:	61 95       	neg	r22
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	8f 4f       	sbci	r24, 0xFF	; 255
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__floatunsisf>:
 3b0:	e8 94       	clt
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <__floatsisf+0x12>

000003b4 <__floatsisf>:
 3b4:	97 fb       	bst	r25, 7
 3b6:	3e f4       	brtc	.+14     	; 0x3c6 <__floatsisf+0x12>
 3b8:	90 95       	com	r25
 3ba:	80 95       	com	r24
 3bc:	70 95       	com	r23
 3be:	61 95       	neg	r22
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	99 23       	and	r25, r25
 3c8:	a9 f0       	breq	.+42     	; 0x3f4 <__floatsisf+0x40>
 3ca:	f9 2f       	mov	r31, r25
 3cc:	96 e9       	ldi	r25, 0x96	; 150
 3ce:	bb 27       	eor	r27, r27
 3d0:	93 95       	inc	r25
 3d2:	f6 95       	lsr	r31
 3d4:	87 95       	ror	r24
 3d6:	77 95       	ror	r23
 3d8:	67 95       	ror	r22
 3da:	b7 95       	ror	r27
 3dc:	f1 11       	cpse	r31, r1
 3de:	f8 cf       	rjmp	.-16     	; 0x3d0 <__floatsisf+0x1c>
 3e0:	fa f4       	brpl	.+62     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3e2:	bb 0f       	add	r27, r27
 3e4:	11 f4       	brne	.+4      	; 0x3ea <__floatsisf+0x36>
 3e6:	60 ff       	sbrs	r22, 0
 3e8:	1b c0       	rjmp	.+54     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ea:	6f 5f       	subi	r22, 0xFF	; 255
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	8f 4f       	sbci	r24, 0xFF	; 255
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	16 c0       	rjmp	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f4:	88 23       	and	r24, r24
 3f6:	11 f0       	breq	.+4      	; 0x3fc <__floatsisf+0x48>
 3f8:	96 e9       	ldi	r25, 0x96	; 150
 3fa:	11 c0       	rjmp	.+34     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3fc:	77 23       	and	r23, r23
 3fe:	21 f0       	breq	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	9e e8       	ldi	r25, 0x8E	; 142
 402:	87 2f       	mov	r24, r23
 404:	76 2f       	mov	r23, r22
 406:	05 c0       	rjmp	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	66 23       	and	r22, r22
 40a:	71 f0       	breq	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40c:	96 e8       	ldi	r25, 0x86	; 134
 40e:	86 2f       	mov	r24, r22
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	2a f0       	brmi	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 416:	9a 95       	dec	r25
 418:	66 0f       	add	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	da f7       	brpl	.-10     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 420:	88 0f       	add	r24, r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	97 f9       	bld	r25, 7
 428:	08 95       	ret

0000042a <__fp_split3>:
 42a:	57 fd       	sbrc	r21, 7
 42c:	90 58       	subi	r25, 0x80	; 128
 42e:	44 0f       	add	r20, r20
 430:	55 1f       	adc	r21, r21
 432:	59 f0       	breq	.+22     	; 0x44a <__fp_splitA+0x10>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	71 f0       	breq	.+28     	; 0x454 <__fp_splitA+0x1a>
 438:	47 95       	ror	r20

0000043a <__fp_splitA>:
 43a:	88 0f       	add	r24, r24
 43c:	97 fb       	bst	r25, 7
 43e:	99 1f       	adc	r25, r25
 440:	61 f0       	breq	.+24     	; 0x45a <__fp_splitA+0x20>
 442:	9f 3f       	cpi	r25, 0xFF	; 255
 444:	79 f0       	breq	.+30     	; 0x464 <__fp_splitA+0x2a>
 446:	87 95       	ror	r24
 448:	08 95       	ret
 44a:	12 16       	cp	r1, r18
 44c:	13 06       	cpc	r1, r19
 44e:	14 06       	cpc	r1, r20
 450:	55 1f       	adc	r21, r21
 452:	f2 cf       	rjmp	.-28     	; 0x438 <__fp_split3+0xe>
 454:	46 95       	lsr	r20
 456:	f1 df       	rcall	.-30     	; 0x43a <__fp_splitA>
 458:	08 c0       	rjmp	.+16     	; 0x46a <__fp_splitA+0x30>
 45a:	16 16       	cp	r1, r22
 45c:	17 06       	cpc	r1, r23
 45e:	18 06       	cpc	r1, r24
 460:	99 1f       	adc	r25, r25
 462:	f1 cf       	rjmp	.-30     	; 0x446 <__fp_splitA+0xc>
 464:	86 95       	lsr	r24
 466:	71 05       	cpc	r23, r1
 468:	61 05       	cpc	r22, r1
 46a:	08 94       	sec
 46c:	08 95       	ret

0000046e <__fp_zero>:
 46e:	e8 94       	clt

00000470 <__fp_szero>:
 470:	bb 27       	eor	r27, r27
 472:	66 27       	eor	r22, r22
 474:	77 27       	eor	r23, r23
 476:	cb 01       	movw	r24, r22
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

0000047c <__mulsf3>:
 47c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__mulsf3x>
 480:	0c 94 c2 02 	jmp	0x584	; 0x584 <__fp_round>
 484:	0e 94 b4 02 	call	0x568	; 0x568 <__fp_pscA>
 488:	38 f0       	brcs	.+14     	; 0x498 <__mulsf3+0x1c>
 48a:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_pscB>
 48e:	20 f0       	brcs	.+8      	; 0x498 <__mulsf3+0x1c>
 490:	95 23       	and	r25, r21
 492:	11 f0       	breq	.+4      	; 0x498 <__mulsf3+0x1c>
 494:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
 498:	0c 94 b1 02 	jmp	0x562	; 0x562 <__fp_nan>
 49c:	11 24       	eor	r1, r1
 49e:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_szero>

000004a2 <__mulsf3x>:
 4a2:	0e 94 15 02 	call	0x42a	; 0x42a <__fp_split3>
 4a6:	70 f3       	brcs	.-36     	; 0x484 <__mulsf3+0x8>

000004a8 <__mulsf3_pse>:
 4a8:	95 9f       	mul	r25, r21
 4aa:	c1 f3       	breq	.-16     	; 0x49c <__mulsf3+0x20>
 4ac:	95 0f       	add	r25, r21
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	55 1f       	adc	r21, r21
 4b2:	62 9f       	mul	r22, r18
 4b4:	f0 01       	movw	r30, r0
 4b6:	72 9f       	mul	r23, r18
 4b8:	bb 27       	eor	r27, r27
 4ba:	f0 0d       	add	r31, r0
 4bc:	b1 1d       	adc	r27, r1
 4be:	63 9f       	mul	r22, r19
 4c0:	aa 27       	eor	r26, r26
 4c2:	f0 0d       	add	r31, r0
 4c4:	b1 1d       	adc	r27, r1
 4c6:	aa 1f       	adc	r26, r26
 4c8:	64 9f       	mul	r22, r20
 4ca:	66 27       	eor	r22, r22
 4cc:	b0 0d       	add	r27, r0
 4ce:	a1 1d       	adc	r26, r1
 4d0:	66 1f       	adc	r22, r22
 4d2:	82 9f       	mul	r24, r18
 4d4:	22 27       	eor	r18, r18
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	62 1f       	adc	r22, r18
 4dc:	73 9f       	mul	r23, r19
 4de:	b0 0d       	add	r27, r0
 4e0:	a1 1d       	adc	r26, r1
 4e2:	62 1f       	adc	r22, r18
 4e4:	83 9f       	mul	r24, r19
 4e6:	a0 0d       	add	r26, r0
 4e8:	61 1d       	adc	r22, r1
 4ea:	22 1f       	adc	r18, r18
 4ec:	74 9f       	mul	r23, r20
 4ee:	33 27       	eor	r19, r19
 4f0:	a0 0d       	add	r26, r0
 4f2:	61 1d       	adc	r22, r1
 4f4:	23 1f       	adc	r18, r19
 4f6:	84 9f       	mul	r24, r20
 4f8:	60 0d       	add	r22, r0
 4fa:	21 1d       	adc	r18, r1
 4fc:	82 2f       	mov	r24, r18
 4fe:	76 2f       	mov	r23, r22
 500:	6a 2f       	mov	r22, r26
 502:	11 24       	eor	r1, r1
 504:	9f 57       	subi	r25, 0x7F	; 127
 506:	50 40       	sbci	r21, 0x00	; 0
 508:	9a f0       	brmi	.+38     	; 0x530 <__mulsf3_pse+0x88>
 50a:	f1 f0       	breq	.+60     	; 0x548 <__mulsf3_pse+0xa0>
 50c:	88 23       	and	r24, r24
 50e:	4a f0       	brmi	.+18     	; 0x522 <__mulsf3_pse+0x7a>
 510:	ee 0f       	add	r30, r30
 512:	ff 1f       	adc	r31, r31
 514:	bb 1f       	adc	r27, r27
 516:	66 1f       	adc	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	91 50       	subi	r25, 0x01	; 1
 51e:	50 40       	sbci	r21, 0x00	; 0
 520:	a9 f7       	brne	.-22     	; 0x50c <__mulsf3_pse+0x64>
 522:	9e 3f       	cpi	r25, 0xFE	; 254
 524:	51 05       	cpc	r21, r1
 526:	80 f0       	brcs	.+32     	; 0x548 <__mulsf3_pse+0xa0>
 528:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_inf>
 52c:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_szero>
 530:	5f 3f       	cpi	r21, 0xFF	; 255
 532:	e4 f3       	brlt	.-8      	; 0x52c <__mulsf3_pse+0x84>
 534:	98 3e       	cpi	r25, 0xE8	; 232
 536:	d4 f3       	brlt	.-12     	; 0x52c <__mulsf3_pse+0x84>
 538:	86 95       	lsr	r24
 53a:	77 95       	ror	r23
 53c:	67 95       	ror	r22
 53e:	b7 95       	ror	r27
 540:	f7 95       	ror	r31
 542:	e7 95       	ror	r30
 544:	9f 5f       	subi	r25, 0xFF	; 255
 546:	c1 f7       	brne	.-16     	; 0x538 <__mulsf3_pse+0x90>
 548:	fe 2b       	or	r31, r30
 54a:	88 0f       	add	r24, r24
 54c:	91 1d       	adc	r25, r1
 54e:	96 95       	lsr	r25
 550:	87 95       	ror	r24
 552:	97 f9       	bld	r25, 7
 554:	08 95       	ret

00000556 <__fp_inf>:
 556:	97 f9       	bld	r25, 7
 558:	9f 67       	ori	r25, 0x7F	; 127
 55a:	80 e8       	ldi	r24, 0x80	; 128
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	08 95       	ret

00000562 <__fp_nan>:
 562:	9f ef       	ldi	r25, 0xFF	; 255
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	08 95       	ret

00000568 <__fp_pscA>:
 568:	00 24       	eor	r0, r0
 56a:	0a 94       	dec	r0
 56c:	16 16       	cp	r1, r22
 56e:	17 06       	cpc	r1, r23
 570:	18 06       	cpc	r1, r24
 572:	09 06       	cpc	r0, r25
 574:	08 95       	ret

00000576 <__fp_pscB>:
 576:	00 24       	eor	r0, r0
 578:	0a 94       	dec	r0
 57a:	12 16       	cp	r1, r18
 57c:	13 06       	cpc	r1, r19
 57e:	14 06       	cpc	r1, r20
 580:	05 06       	cpc	r0, r21
 582:	08 95       	ret

00000584 <__fp_round>:
 584:	09 2e       	mov	r0, r25
 586:	03 94       	inc	r0
 588:	00 0c       	add	r0, r0
 58a:	11 f4       	brne	.+4      	; 0x590 <__fp_round+0xc>
 58c:	88 23       	and	r24, r24
 58e:	52 f0       	brmi	.+20     	; 0x5a4 <__fp_round+0x20>
 590:	bb 0f       	add	r27, r27
 592:	40 f4       	brcc	.+16     	; 0x5a4 <__fp_round+0x20>
 594:	bf 2b       	or	r27, r31
 596:	11 f4       	brne	.+4      	; 0x59c <__fp_round+0x18>
 598:	60 ff       	sbrs	r22, 0
 59a:	04 c0       	rjmp	.+8      	; 0x5a4 <__fp_round+0x20>
 59c:	6f 5f       	subi	r22, 0xFF	; 255
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	08 95       	ret

000005a6 <__udivmodsi4>:
 5a6:	a1 e2       	ldi	r26, 0x21	; 33
 5a8:	1a 2e       	mov	r1, r26
 5aa:	aa 1b       	sub	r26, r26
 5ac:	bb 1b       	sub	r27, r27
 5ae:	fd 01       	movw	r30, r26
 5b0:	0d c0       	rjmp	.+26     	; 0x5cc <__udivmodsi4_ep>

000005b2 <__udivmodsi4_loop>:
 5b2:	aa 1f       	adc	r26, r26
 5b4:	bb 1f       	adc	r27, r27
 5b6:	ee 1f       	adc	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	a2 17       	cp	r26, r18
 5bc:	b3 07       	cpc	r27, r19
 5be:	e4 07       	cpc	r30, r20
 5c0:	f5 07       	cpc	r31, r21
 5c2:	20 f0       	brcs	.+8      	; 0x5cc <__udivmodsi4_ep>
 5c4:	a2 1b       	sub	r26, r18
 5c6:	b3 0b       	sbc	r27, r19
 5c8:	e4 0b       	sbc	r30, r20
 5ca:	f5 0b       	sbc	r31, r21

000005cc <__udivmodsi4_ep>:
 5cc:	66 1f       	adc	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	1a 94       	dec	r1
 5d6:	69 f7       	brne	.-38     	; 0x5b2 <__udivmodsi4_loop>
 5d8:	60 95       	com	r22
 5da:	70 95       	com	r23
 5dc:	80 95       	com	r24
 5de:	90 95       	com	r25
 5e0:	9b 01       	movw	r18, r22
 5e2:	ac 01       	movw	r20, r24
 5e4:	bd 01       	movw	r22, r26
 5e6:	cf 01       	movw	r24, r30
 5e8:	08 95       	ret

000005ea <_exit>:
 5ea:	f8 94       	cli

000005ec <__stop_program>:
 5ec:	ff cf       	rjmp	.-2      	; 0x5ec <__stop_program>
